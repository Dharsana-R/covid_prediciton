# -*- coding: utf-8 -*-
"""covidpredcition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpes4yDOZ0cyXknFRUHu5Zn8rVS9jBc0
"""

import pandas as pd
import numpy as np

data = pd.read_csv("covid_data.csv")
data.head()

data.isnull().sum()

import numpy as np
import requests
import pandas
from keras.models import load_model
import numpy as np
from tensorflow import keras
from tensorflow.keras.layers import Dense
from keras import Sequential
from sklearn.model_selection import train_test_split

columns_with_missing_values = [
    'population',
    'cases_new',
    'cases_active',
    'cases_critical',
    'cases_recovered',
    'deaths_new',
    'deaths_1M_pop',
    'deaths_total',
    'tests_total',
    # Add the rest of your column names here
]
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')

# Use the imputer to fill in missing values for the selected columns
data[columns_with_missing_values] = imputer.fit_transform(data[columns_with_missing_values])

data.isnull().sum()
data.drop(columns=['day','time'], inplace=True)
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
cols=['continent','country']
data[cols]=data[cols].apply(le.fit_transform)
data.head()

columns_with_missing_values = [
    'continent',
    'cases_1M_pop',
    'tests_1M_pop',


    # Add the rest of your column names here
]

imputer = SimpleImputer(strategy='mean')

# Use the imputer to fill in missing values for the selected columns
data[columns_with_missing_values] = imputer.fit_transform(data[columns_with_missing_values])

X = data[[ 'continent',
    'country',
    'population',
    'cases_new',
    'cases_active',
    'cases_critical',
    'cases_recovered',
    'cases_1M_pop',
    'cases_total',
    'deaths_new',
    'deaths_1M_pop',
    'tests_1M_pop',
    'tests_total',

    ]].values
y = data['deaths_total'].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.5)
X_train = X_train.astype('float32')
y_train = y_train.astype('float32')

from tensorflow import keras
model=keras.Sequential()
model.add(keras.layers.Dense(100,input_dim=13,activation='relu'))
model.add(keras.layers.Dense(200,input_dim=100,activation='relu'))
model.add(keras.layers.Dense(200,input_dim=200,activation='relu'))
model.add(keras.layers.Dense(200,input_dim=100,activation='relu'))
model.add(keras.layers.Dense(200,input_dim=200,activation='relu'))
model.add(keras.layers.Dense(1,input_dim=200))

model.compile(loss='mean_squared_error', optimizer='adam',metrics="mse")

model.fit(X_train,y_train,epochs=100)

y_p = model.predict(X_test)
print(y_p[0][0])

model.save('covid.h5')

model = keras.models.load_model('covid.h5')

# Prepare your new input data (replace with your own data)
new_data = np.array([[
    0,  # continent (replace with the appropriate integer)
    0,  # country (replace with the appropriate integer)
    83019213.0,  # population (replace with the appropriate value)
    100,  # cases_new (replace with the appropriate value)
    500,  # cases_active (replace with the appropriate value)
    20,   # cases_critical (replace with the appropriate value)
    8000,  # cases_recovered (replace with the appropriate value)
    500,  # cases_1M_pop (replace with the appropriate value)
    10000,  # cases_total (replace with the appropriate value)
    10,  # deaths_new (replace with the appropriate value)
    0.1,  # deaths_1M_pop (replace with the appropriate value)
    2000,  # tests_1M_pop (replace with the appropriate value)
    200000,  # tests_total (replace with the appropriate value)
]])

# Assuming you have already performed data preprocessing (label encoding and imputation) on new_data.

# Make predictions on the new data
new_predictions = model.predict(new_data)

# Print the prediction for 'deaths_total'
print("Predicted deaths_total:", new_predictions[0][0])
